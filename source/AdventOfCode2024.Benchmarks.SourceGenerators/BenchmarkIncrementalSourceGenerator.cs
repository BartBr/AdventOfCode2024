using System;
using System.Linq;
using System.Text;
using AdventOfCode2024.Benchmarks.SourceGenerators.Contexts;
using AdventOfCode2024.Benchmarks.SourceGenerators.Helpers;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;

namespace AdventOfCode2024.Benchmarks.SourceGenerators;

[Generator]
public class BenchmarkIncrementalSourceGenerator : IIncrementalGenerator
{
	public void Initialize(IncrementalGeneratorInitializationContext context)
	{
		var incrementalValueProvider = context.CompilationProvider.SelectMany(static (compilation, _) =>
		{
			Func<INamedTypeSymbol, bool> happyPuzzleInterfacePredicate = y => y.ContainingNamespace.ToString() == "AdventOfCode2024.Common" && y.MetadataName == "IHappyPuzzle`2";

			var puzzleTypeSymbols = compilation.GlobalNamespace
				.GetNamespaceMembers()
				.Single(x => x.Name == "AdventOfCode2024")
				.GetNamespaceMembers()
				.Single(x => x.Name == "Puzzles")
				.GetNamespaceMembers()
				.SelectMany(x => x.GetTypeMembers())
				.Where(x => !x.IsAbstract && x.AllInterfaces.Any(happyPuzzleInterfacePredicate))
				.Select(x =>
				{
					// Safeguard against prefixed classes
					var groupKey = x.Name.Substring(x.Name.Length - 5);

					var lastDotIndex = x.ContainingNamespace.Name.LastIndexOf('.');
					var username = x.ContainingNamespace.Name.Substring(lastDotIndex + 1);

					var fullyQualifiedPuzzleTypeName = x.ToDisplayString();

					var puzzlePartReturnTypes = x.AllInterfaces.Single(happyPuzzleInterfacePredicate).TypeArguments;
					var firstPartReturnType = puzzlePartReturnTypes[0].ToDisplayString();
					var secondPartReturnType = puzzlePartReturnTypes[1].ToDisplayString();

					return new BenchmarkPuzzleInfo(groupKey, username, fullyQualifiedPuzzleTypeName, firstPartReturnType, secondPartReturnType);
				})
				.GroupBy(x => x.GroupKey)
				.OrderBy(x => x.Key);

			return puzzleTypeSymbols;
		});

		context.RegisterSourceOutput(incrementalValueProvider, GenerateBenchmarkClasses);

		var lastPuzzleIncrementalValueProvider = incrementalValueProvider
			.Collect()
			.Select((x, _) => x.LastOrDefault()?.Key);

		context.RegisterSourceOutput(lastPuzzleIncrementalValueProvider, GenerateLastPuzzleBenchmarkClass);
	}

	private static void GenerateBenchmarkClasses(SourceProductionContext productionContext, IGrouping<string, BenchmarkPuzzleInfo> benchmarkPuzzleContext)
	{
		var key = benchmarkPuzzleContext.Key;
		var puzzleSolutions = benchmarkPuzzleContext
			.OrderBy(x => x.Username)
			.ToArray();


		var sourceWriter = new SourceWriter();

		sourceWriter.WriteLine("// <auto-generated/>");
		sourceWriter.WriteLine();
		sourceWriter.WriteLine("namespace AdventOfCode2024.Benchmarks.Generated;");
		sourceWriter.WriteLine();
		sourceWriter.WriteLine($"public class {key}Benchmark");
		sourceWriter.WriteLine('{');
		sourceWriter.Indentation++;

		foreach (var benchmarkPuzzleInfo in puzzleSolutions)
		{
			sourceWriter.WriteLine($"private readonly {benchmarkPuzzleInfo.FullyQualifiedPuzzleTypeName} _sub{benchmarkPuzzleInfo.Username} = new();");
		}

		sourceWriter.WriteLine();

		sourceWriter.WriteLine($"public System.Collections.Generic.IEnumerable<AdventOfCode2024.Common.Input> ValuesForInput => AdventOfCode2024.Common.Helpers.GetAllInputs(\"{key}\");");
		sourceWriter.WriteLine("[global::BenchmarkDotNet.Attributes.ParamsSource(nameof(ValuesForInput))]");
		sourceWriter.WriteLine("public AdventOfCode2024.Common.Input Input;");

		foreach (var benchmarkPuzzleInfo in puzzleSolutions)
		{
			foreach (var codeLine in GenerateUserSpecificBenchmarkMethods(benchmarkPuzzleInfo.Username, benchmarkPuzzleInfo.FirstPartReturnType, benchmarkPuzzleInfo.SecondPartReturnType).Split('\n'))
			{
				sourceWriter.WriteLine(codeLine);
			}
		}

		sourceWriter.Indentation--;

		sourceWriter.WriteLine('}');

		productionContext.AddSource($"{key}Benchmark.generated.cs", sourceWriter.ToSourceText());
	}

	private static string GenerateUserSpecificBenchmarkMethods(string name, string firstPartReturnType, string secondPartReturnType)
	{
		return $@"
[global::BenchmarkDotNet.Attributes.Benchmark]
[global::BenchmarkDotNet.Attributes.BenchmarkCategory(""Part 1"")]
public {firstPartReturnType} {name}_Part1()
{{
	return _sub{name}.SolvePart1(Input);
}}

[global::BenchmarkDotNet.Attributes.Benchmark]
[global::BenchmarkDotNet.Attributes.BenchmarkCategory(""Part 2"")]
public {secondPartReturnType} {name}_Part2()
{{
	return _sub{name}.SolvePart2(Input);
}}";
	}

	private static void GenerateLastPuzzleBenchmarkClass(SourceProductionContext productionContext, string? day)
	{
		productionContext.AddSource("LastPuzzleBenchmark.generated.cs", SourceText.From($@"
// <auto-generated/>

namespace AdventOfCode2024.Benchmarks.Generated;

public class LastPuzzleBenchmark : {day}Benchmark;
", Encoding.UTF8));
	}
}